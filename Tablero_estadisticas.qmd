---
title: "Tablero estadisticas HIGA Alende" 
format:
  dashboard:
    orientation: columns
    scrolling: false
    #css: styles.css
    logo: images/Logo HIGA.png
    fig-width: 10
    fig-asp: 0.3
    theme: solar
    nav-buttons: 
      - icon: linkedin
        href: https://www.linkedin.com/in/juan-ignacio-irassar-442568233/
      - facebook
      - icon: hospital
        href: https://www.ine.gov.ar
        target: _blank
---

```{r Procesar base}

library(ggplot2)
library(plotly)
library(dplyr)



# 1. Leer bases ----
base_SGC <- readxl::read_xlsx("internaciones.xlsx",skip = 5)

base_SGC_pases <- readxl::read_xlsx("internaciones.xlsx",skip = 4,sheet = "PASES")

# 2. Modificar base ----

##  Modificar fechas ingreso y egreso ----

base_SGC <- base_SGC %>%
  mutate(Fecha_Ingreso = as.Date(stringr::str_sub(`FECHA INGRESO`, start = 1,end = 10),
                                 format = "%Y-%m-%d"),
         Fecha_Egreso = as.Date(stringr::str_sub(`FECHA EGRESO`, start = 1,end = 10),
                                format = "%Y-%m-%d"))

base_SGC_pases <- base_SGC_pases %>%
  mutate(Fecha_Ingreso = as.Date(stringr::str_sub(`FECHA INGRESO`, start = 1,end = 10),
                                 format = "%d/%m/%Y"),
         Fecha_Egreso = as.Date(stringr::str_sub(`FECHA EGRESO`, start = 1,end = 10),
                                format = "%d/%m/%Y"))

## Agregar Semana Epidemiologica ----

base_SGC <- base_SGC %>% 
  mutate(SE = lubridate::epiweek(Fecha_Ingreso),
         SE_egreso = lubridate::epiweek(Fecha_Egreso),
         Anio_Ingreso = lubridate::year(Fecha_Ingreso),
         Anio_Egreso = lubridate::year(Fecha_Egreso))

fallecidos <- nrow(dplyr::filter(base_SGC,`MOTIVO EGRESO` %in% c("ALTA MÉDICA")))
internados <- nrow(base_SGC)
#egresos <- nrow(filter(base_SGC, `MOTIVO EGRESO` %in% c("ALTA MÉDICA","ALTA TRANSITORIA",
#                                                        "DERIVADO A OTRO ESTABLECIMIENTO")))

egresos <- nrow(filter(base_SGC, !is.na(`MOTIVO EGRESO`)))
#fallecidos <- nrow(base_SGC %>% dplyr::filter(`MOTIVO EGRESO` == "DEFUNCIÓN"))
#fallecidos <- nrow(base_SGC[base_SGC$`MOTIVO EGRESO` == "DEFUNCIÓN",])
#fallecidos <- as.numeric(fallecidos)
#fallecidos <- egresos

#fallecidos <- base_SGC[base_SGC$`MOTIVO EGRESO` == "DEFUNCIÓN",]

# fallecidos <- base_SGC %>% 
#   filter(`MOTIVO EGRESO` != "ALTA MÉDICA") %>% 
#   filter(`MOTIVO EGRESO` != "RETIRO VOLUNTARIO") %>% 
#   filter(`MOTIVO EGRESO` != "ALTA TRANSITORIA") %>% 
#   filter(`MOTIVO EGRESO` != "DERIVADO A OTRO ESTABLECIMIENTO") %>% 
#   filter(`MOTIVO EGRESO` != "OTRO") %>% 
#   filter(!is.na(`MOTIVO EGRESO`))
fallecidos <- nrow(filter(base_SGC,`MOTIVO EGRESO` == "DEFUNCIÓN"))


periodo_tiempo <- select(base_SGC,Fecha_Ingreso) %>% 
  filter(Fecha_Ingreso == max(Fecha_Ingreso)) %>% 
  mutate(fecha = paste(
    lubridate::day(Fecha_Ingreso), "de",
    lubridate::month(Fecha_Ingreso, label = T, abbr = F), "de",
    lubridate::year(Fecha_Ingreso), sep = " "))
periodo_tiempo <- unique(periodo_tiempo$fecha)
```

#  {.sidebar}

Este tablero refiere estadisticas para:

|               |                     |
|---------------|---------------------|
| **Hospital**  | HIGA Dr. Alende     |
| **Unidad**    | Epidemiologia       |
|**Actualizado**| `{r} periodo_tiempo`   |

------------------------------------------------------------------------

Al `{r} periodo_tiempo` el hospital cuenta con la siguiente cantidad de camas:

|                          |     |
|--------------------------|-----|
| **Camas generales**      |  xx |
| **Camas UTI**            |  xx |
| **Camas guardia**        |  xx |

------------------------------------------------------------------------

::: {.callout-note collapse="true"}
## Fuente de datos

Este es un tablero realizado a partir de la información que se reporta en el Sistema de Gestión de Camas (SIGEC) y en el Hydra.
:::

# Internados

## Column {width=25%}

```{r}
#| content: valuebox
#| title: "Ingresos"

list(
  icon = "person-up",
  color = "danger",
  value = internados
)
```


```{r}
#| content: valuebox
#| title: "Egresos"

list(
  icon = "person-up",
  color = "success",
  value = egresos
)
```

```{r}
#| content: valuebox
#| title: "Fallecidos"

list(
  icon = "infinity",
  color = "red",
  value = fallecidos
)
```


## Column {.tabset}

```{r}

# library(dygraphs)
# 
# casos_dia <- count(base_SGC,Fecha_Ingreso)
# 
# dygraph(casos_dia, main = "Ingresos por dia") %>% 
#   dyOptions(drawPoints = TRUE, pointSize = 2) %>%
#   dyHighlight(highlightCircleSize = 5, 
#               #highlightSeriesBackgroundAlpha = 0.2,
#               hideOnMouseOut = T) %>% 
#   dyRangeSelector(height = 20,
#     dateWindow = c("2024-01-01", "2024-12-31")) %>% 
#   dyRoller(rollPeriod = 7)

```

### Ingresos totales

::: {.card title = "Ingresos por dia"}

```{r}
library(highcharter)
library(xts)

casos_dia <- count(base_SGC,Fecha_Ingreso)
casos_dia_media_movil <- count(base_SGC,Fecha_Ingreso) %>% 
  mutate(media_movil = zoo::rollmean(n,k=7,fill = NA,align = "right"),
         n = NULL)

f <- as.xts(casos_dia)
d <- as.xts(casos_dia_media_movil)

highchart(type = "stock") |> 
  hc_add_series(d, name = "Ingresos por dia (media movil)",color = hex_to_rgba("red", 0.7)) %>% 
  hc_add_series(f, name = "Ingresos por dia",color = hex_to_rgba("black", 0.7)) %>% 
  hc_add_theme(hc_theme_smpl()) 
  
```
:::

::: {.card title = "Ingresos por mes"}
```{r}
#| fig-width: 15

base_SGC <- base_SGC |> 
  mutate(Anio_Ingreso_grafico = if_else(Fecha_Ingreso == "2022-01-01",2021,
                                        if_else(Fecha_Ingreso == "2023-12-31",2024,Anio_Ingreso)),
         Mes_ingreso = lubridate::month(Fecha_Ingreso))

p <- base_SGC %>% 
  count(Anio_Ingreso_grafico,Mes_ingreso) %>% 
  #mutate(Anio_SE = paste(stringr::str_sub(Anio_Ingreso_grafico,3,4),SE,sep = "-")) %>% 
  #filter(Anio_SE != "21-53") %>% 
  mutate(x = seq(1,length(Mes_ingreso),1)) %>% 
  ggplot(aes(x = x, y = n))+
  geom_bar(stat = "identity", fill = "steelblue",width = 0.6)+
  #geom_line()+
  #geom_text(aes(label = n), stat = "count", vjust = 0, colour = "black")+
  #scale_x_continuous(breaks = c(1,15,35,53,67,87,105,119,139,157,171), labels = c)+
  scale_x_continuous(n.breaks = 20)+
  scale_y_continuous(breaks = seq(0,max(table(base_SGC$Mes_ingreso)),200))+
  theme_minimal()+
  labs(y = "Ingresos totales", x = "Mes de Ingreso")

ggplotly(p, tooltip = "y")

```
:::

### Egresos totales

::: {.card title = "Egresos por dia"}

```{r}
library(highcharter)
library(xts)

casos_dia <- base_SGC %>% 
  filter(!is.na(Fecha_Egreso)) %>% 
  count(Fecha_Egreso)
casos_dia_media_movil <- base_SGC %>% 
  filter(!is.na(Fecha_Egreso)) %>% 
  count(Fecha_Egreso) %>% 
  mutate(media_movil = zoo::rollmean(n,k=7,fill = NA,align = "right"),
         n = NULL)

f <- as.xts(casos_dia)
d <- as.xts(casos_dia_media_movil)

highchart(type = "stock") |> 
  hc_add_series(d, name = "Egresos por dia (media movil)",color = hex_to_rgba("red", 0.7)) %>% 
  hc_add_series(f, name = "Egresos por dia",color = hex_to_rgba("black", 0.7)) %>% 
  hc_add_theme(hc_theme_smpl()) 
  
```
:::

::: {.card title = "Egresos por mes"}
```{r}
#| fig-width: 15

base_SGC <- base_SGC |> 
  mutate(Mes_Egreso = lubridate::month(Fecha_Egreso))

p <- base_SGC %>% 
  count(Anio_Egreso,Mes_Egreso) %>%
  filter(!is.na(Mes_Egreso)) %>% 
  #mutate(Anio_SE = paste(stringr::str_sub(Anio_Ingreso_grafico,3,4),SE,sep = "-")) %>% 
  #filter(Anio_SE != "21-53") %>% 
  mutate(x = seq(1,length(Mes_Egreso),1)) %>% 
  ggplot(aes(x = x, y = n))+
  geom_bar(stat = "identity", fill = "steelblue",width = 0.6)+
  #geom_line()+
  #geom_text(aes(label = n), stat = "count", vjust = 0, colour = "black")+
  #scale_x_continuous(breaks = c(1,15,35,53,67,87,105,119,139,157,171), labels = c)+
  scale_x_continuous(n.breaks = 12)+
  scale_y_continuous(breaks = seq(0,max(table(base_SGC$Mes_Egreso)),200))+
  theme_minimal()+
  labs(y = "Egresos totales", x = "Mes de Egreso")

ggplotly(p, tooltip = "y")

```
:::

### Ingresos por servicio

::: {.card title = "Ingresos por dia segun servicio"}

```{r}
library(crosstalk)
casos_dia <- base_SGC_pases %>% 
  mutate(servicio = if_else(SERVICIO %in% c("CLINICA MEDICA",
                                            "CLINICA GENERAL - MEDICINA GENERAL",
                                            "CLINICA GENERAL CRONICOS","AISLAMIENTO"),
                                            "CLINICA MEDICA",SERVICIO)) %>% 
  count(servicio,Fecha_Ingreso) %>% 
  mutate(mes = lubridate::month(Fecha_Ingreso)) %>% 
  group_by(servicio,mes) %>% 
  mutate(n_mes = sum(n)) %>% 
  ungroup()

tx <- highlight_key(casos_dia)

bscols(widths = c(4,8),
  filter_select("servicio", "Servicio", tx, ~servicio, multiple = FALSE),
  plot_ly(tx, x = ~Fecha_Ingreso, y = ~n, showlegend = FALSE, width = "100%") %>% 
    add_lines(color = ~servicio, colors = "lightsalmon"))

```
:::

::: {.card title="Ingresos por mes segun servicio"}
```{r}
require(crosstalk)
casos_dia <- base_SGC_pases %>% 
  mutate(servicio = if_else(SERVICIO %in% c("CLINICA MEDICA",
                                            "CLINICA GENERAL - MEDICINA GENERAL",
                                            "CLINICA GENERAL CRONICOS","AISLAMIENTO"),
                                            "CLINICA MEDICA",SERVICIO)) %>% 
  count(servicio,Fecha_Ingreso) %>% 
  mutate(mes = lubridate::month(Fecha_Ingreso)) %>% 
  group_by(servicio,mes) %>% 
  mutate(n_mes = sum(n)) %>% 
  ungroup()

tx <- highlight_key(casos_dia)

bscols(widths = c(4,8),
  filter_select("servicio", "Servicio", tx, ~servicio, multiple = FALSE),
  plot_ly(tx, x = ~mes, y = ~n_mes, showlegend = FALSE, width = "100%") %>% 
    add_lines(color = ~servicio, colors = "lightsalmon") %>% 
    add_markers(color = ~servicio, colors = "lightsalmon") %>% 
    layout(#plot_bgcolor='#e5ecf6',
           xaxis = list(nticks = 12,
                        #zerolinecolor = '#ffff',
                        #zerolinewidth = 1,
                        gridcolor = 'ffff',
                        range = list(1, 12))))
```

:::



# Indicadores

# Ambulatorio - UPA

# Cirugias
